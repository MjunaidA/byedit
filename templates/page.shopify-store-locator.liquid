{{ 'pageTemplate.css' | asset_url | stylesheet_tag }}
<style>
  .store-locations-heading{
    text-align: center;
    margin-top: 1rem;
    margin-bottom: 2rem;
    font-family: inherit;
    font-size: 20px;
    font-weight: 600;
    color: #222;
  }
  #locations{
  	display:flex;
    flex-direction:column;
    overflow:auto;
    margin: auto;
    width:33%;
    height:90vh;
  }
  .expand-locations{
    padding:20px auto ;
    font-size: 15px;
    font-weight: bolder;
    color: rgb(82, 81, 81);
  }
  .items,.expand-locations{
    padding: 15px 0;
    display: flex;
    justify-content: center;
    flex-direction: column;
    border: none;
    border-bottom: 1px solid #d3d3d32b;
  }
  .name,.city,.contact,.timing{
		display:block;
    	padding:1px;
      font-size: 12px;
    }
  .name{
  	font-size:16px;
    font-weight:bold;
    margin-bottom: 1.5rem;
  }

  .items:hover{
  	cursor:pointer;
  }
  .ds-viewgm-btn {
        font-size: 12px;
        color: black;
        width: fit-content;
        margin-top: 1rem;
}
  .ds-store-title{
  	font-size:16px;
    font-weight:500;
    color:#222;
  }
 .gm-style-mtc button {
    background: #000!important;
    color: #fff!important;
}
  .gm-style-mtc ul li span img{
  	transform:translateY(-0.15em)!important;
  }
  .ds-cityhead{
  	color:#222
  }
  #map{
    width: 66%;
    height: 90vh;
    position: relative;
    overflow: hidden;
  }
  #map-container{
    display:flex;
  }
  button.expand-locations {
    display: none;
}
  .dsstore-list{
	background:#fff;
    margin:0rem 1rem;
    padding-top:16px;
    padding-bottom:0px;
    border-bottom: 1px solid #ddd;

 }
  .dsstore-list span{
    font-weight: 500;
    color: #222;
    font-size: 20px;
    width:100%;
    margin-bottom: 13px;
  }
  .contentPageTemp {
    width: 73%;
    padding: 2rem 3rem;
}

  @media (max-width:767px) {
#locations {
overflow: hidden;
  height: 100%;
}
    #location{
      display:flex;
      flex-direction:row;
    }
    #map-container{
      display: flex;
      flex-direction: column-reverse;
    }
    .items, .expand-locations {
      padding: 1.5rem;
  }
    #locations,#map{
      width: 100%;
    }
    .ds-wrapper{
  	max-width:unset;
    margin:0rem auto;
  }
    #map{
    	margin:unset!important;
      height: 50vh;
    }
    .store-locator-page.page-width {
      padding: 0;
  }
  .contentPageTemp {
    padding: 2rem 0;
    width: 90%;
}
  }

#locations .contact a {
  color: #000;
}
</style>

<div class="mainPageWrapper">
  <div class="mainFlexWrapper">
    <div class="navigationPageTemp contentHeight">
      <div class="menuWrapper">
        <div class="titleWrapper">
          <h3 class="menuHeading">Customer Care</h3>
          <div onclick="mobileCaret()" class="mobile-only iconHeader">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="12"
              height="8"
              viewBox="0 0 12 8"
              fill="none">
              <path
                d="M0.400391 0.959993L5.92923 7.19922L11.6004 0.799221"
                stroke="black"
                stroke-width="0.784409" />
            </svg>
          </div>
        </div>
        <div class="meniItemWrapper">
          <a style="all:unset;cursor:pointer" href="/pages/faqs">
            <p class="menuITEM">Faqs</p>
          </a>
          <a style="all:unset;cursor:pointer" href="/pages/contact-us">
            <p class="menuITEM">Contact Us</p>
          </a>
          <a style="all:unset;cursor:pointer" href="/pages/track-your-order">
            <p class="menuITEM">TRACK YOUR ORDER</p>
          </a>
          <a style="all:unset;cursor:pointer" href="/pages/shopify-store-locator">
            <p class="menuITEM active">Store Locator</p>
          </a>
          <a style="all:unset;cursor:pointer" href="/pages/return-and-exchange">
            <p class="menuITEM">Returns</p>
          </a>
          <a style="all:unset;cursor:pointer" href="/pages/shipping">
            <p class="menuITEM">Shipping</p>
          </a>
          <a style="all:unset;cursor:pointer" href="/pages/terms-of-use">
            <p class="menuITEM">Terms & Conditions</p>
          </a>
          <a style="all:unset;cursor:pointer" href="/pages/privacy-policy">
            <p class="menuITEM">Privacy Policy</p>
          </a>
        </div>
      </div>
    </div>

    <div class="contentPageTemp contentHeight">
      <div class="store-locator-page">
        {% comment %} <h1 class="store-locations-heading">Store Locator</h1> {% endcomment %}
          <div id="map-container" onload="getLocation()">
            <div id="locations">
              {% comment %} <div class="dsstore-list">
                <span> Store List </span>
              </div> {% endcomment %}
            </div> 
            <div id="map"></div>
          </div>
      </div>
    </div>

  </div>
</div>

<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.js" integrity="sha512-n/4gHW3atM3QqRcbCn6ewmpxcLAHGaDjpEBu4xZd47N0W2oQ+6q7oc3PXstrJYXcbNU1OHdQ1T7pAP+gi5Yu8g==" crossorigin="anonymous"></script> -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.js" integrity="sha512-otOZr2EcknK9a5aa3BbMR9XOjYKtxxscwyRHN6zmdXuRfJ5uApkHB7cz1laWk2g8RKLzV9qv/fl3RPwfCuoxHQ==" crossorigin="anonymous"></script>
<script>
  let nearestLongitude, currentLongitude, nearestCity, updatedLat,updatedLng;
  fetch('https://get.geojs.io/v1/ip/geo.json')
  .then(response => response.json())
  .then(data => {
    currentLatitude = data.latitude;
    currentLongitude = data.longitude;
    
  })
  .catch(error => {
    console.log("Error occurred:", error);
  });
 
  domain="edit-watches.myshopify.com"
  const BackEndURL="https://store-locator-be.alche.cloud"
  var Token=""
  var stores=[]
  var currentLocation=[]
  var currentPostitionLat,currentPostitionLng=""
    axios.post(`${BackEndURL}/get_token`,{"domain":"edit-watches.myshopify.com"})
    .then(res=>{
        console.log(res.data)
        Token = res.data.token
        StoreLocation()
        getLocation()
    })
    .catch(err=>{
        console.log(err)
    })
   	let buttonName=""
    function StoreLocation(){
    axios.get(`${BackEndURL}/AllLocations?shop=edit-watches.myshopify.com&status=True`,{headers:{"Authorization":`token ${Token}`}})
    .then(res=>{
        stores=res.data
           if(navigator.geolocation){
       // Find the nearest Store according to the location
        nearestLongitude = stores.reduce(function (prev, curr) {
          var prevDistance = Math.abs(Number(prev.lng) - currentLongitude);
          var currDistance = Math.abs(Number(curr.lng) - currentLongitude);
          console.log(prevDistance < currDistance)
          return (prevDistance < currDistance) ? prev : curr;
        }).lng;

      let nearestLat = stores.reduce(function (prev, curr) {
          var prevDistance = Math.abs(Number(prev.lng) - currentLongitude);
          var currDistance = Math.abs(Number(curr.lng) - currentLongitude);
          console.log(prevDistance < currDistance)
          return (prevDistance < currDistance) ? prev : curr;
        }).lat;
      // End find the nearest Store according to the location
        updatedLng= nearestLongitude
        updatedLat= nearestLat
      // Find the nearest City according to the location
        nearestCity = stores.reduce(function (prev, curr) {
          var prevDistance = Math.abs(Number(prev.lng) - currentLongitude);
          var currDistance = Math.abs(Number(curr.lng) - currentLongitude);
          console.log(prevDistance < currDistance)
          return (prevDistance < currDistance) ? prev : curr;
        }).city;
      // End find the nearest Store according to the location
        
     }
      
        for(x in stores){

          console.log('stores',stores[x])
   
          if (buttonName!=stores[x].city){
            $("#locations").append(
              `<Button class="expand-locations" id="${stores[x].id}" value="${stores[x].city.replace(" ","-")}" style="padding:10px;text-align:center;font-size:20px;font-weight:500;margin-bottom:13px" class="ds-cityhead">${stores[x].city}</button>`
			)
            // buttonName=stores[x].city
          }
          distance=""
          distance = getDistanceFromLatLng(parseFloat(stores[x].lat),parseFloat(stores[x].lng),currentPostitionLat,currentPostitionLng).toFixed(2)
          console.log(distance)
          if(Number.isNaN(distance)){
            distance=""
          }
          var cityName = stores[x].city.toLowerCase();
          var province = "", zipCode = ""
          if(stores[x].province == 'PROVINCE'){
            province = ""
          }else{
            province = stores[x].province
          }

          if(stores[x].zip_code == '00000'){
            zipCode = ""
          }else{
            zipCode = `Zip Code: ${stores[x].zip_code}`
          }
          
          $("#locations").append(
            `<div data-lng="${stores[x].lng}" class="items ${stores[x].city.replace(" ","-")}" style="display:none; cursor:pointer" onclick="GetStoreLocation(${x})">
			  <font class="name" style="display:flex;justify-content:space-between;"><span class="ds-store-title" style="text-transform:capitalize">${cityName}</span><span class="ds-store-title" style="display:none">${stores[x].name}</span><span style="color:green;padding-right:10px;visibility:hidden">${distance} km</span></font>
			  <font class="city">${stores[x].address}, ${stores[x].area}, ${stores[x].city}, ${province}</font>
			  <font class="timing">${stores[x].timing_details}</font> 
			  <font class="contact">${zipCode}</font>
              <font class="contact">${stores[x].contact}</font>
         <a href="https://www.google.com/maps/search/${stores[x].address}${stores[x].address}"  class="ds-viewgm-btn" target="_blank">Open in Google Map</a>
        </div>`
          )
          
        }
      	myMap()
      $(".expand-locations").click(function(){
            let temp=$(this).val();
//         		console.log(temp)
                 $(`.${temp}`).slideToggle();
          });
console.log(`trigger ${stores[x].id}`)
 // $(`button#${stores[x].id}.expand-locations[value="${stores[x].city.replace(" ","-")}"]`).trigger('click');
      $(`.expand-locations`).trigger('click');
      
    })
    
    .catch(err=>{
        console.log(err)
    })
    }
function getLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(showPosition);
  } else { 
    x.innerHTML = "Geolocation is not supported by this browser.";
  }
}
function showPosition(position) {
        currentLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
		currentPostitionLat=position.coords.latitude
        currentPostitionLng=position.coords.longitude
//         console.log(currentLocation)
//         currentCityMap(currentLocation)
        myMap()
}
  function myMap(){
      let options;
      if ("geolocation" in navigator) {
        // Geolocation is supported
        if (navigator.geolocation) {
          // Geolocation is enabled
         options = {
              zoom:10,
              center:{lat:parseFloat(updatedLat),lng:parseFloat(updatedLng)}
          }
        } else {
          // Geolocation is disabled
         options = {
              zoom:  3,
              center:{lat:30.3753,lng:69.3451}
          }
        }
      } else {
        // Geolocation is not supported
        options = {
              zoom:  3,
              center:{lat:30.3753,lng:69.3451}
          }
      }

  
     
      console.log(updatedLat, updatedLng)
      // New map
      const directionsService = new google.maps.DirectionsService();
      var map = new google.maps.Map(document.getElementById("map"), options);
      var directionsRenderer = new google.maps.DirectionsRenderer();
      // Array of markers
      var markers = stores
      // Loop through markers
      for(var i = 0;i < markers.length;i++){
        // Add marker
        addMarker(markers[i]);
      }
      // Add Marker Function
      function addMarker(props){
        var marker = new google.maps.Marker({
          position:{lat:parseFloat(props.lat),lng:parseFloat(props.lng)},
          map:map,
        });
        directionsRenderer.setMap(map);
        // Check for customicon ### For Adding Custom Icon On Pin Point Location
//         if(props.iconImage){
//           // Set icon image
//           marker.setIcon(props.iconImage);
//         }
          var infoWindow = new google.maps.InfoWindow({
            content:`<font><strong>${props.name}</strong><br/>${props.address}</font>`
          });
          marker.addListener("click", function(){
            infoWindow.open(map, marker);
            directionsService.route(
              {
                origin: currentLocation,
                destination: {lat:parseFloat(props.lat),lng:parseFloat(props.lng)},
                travelMode: "DRIVING"
              },
              (response, status) => {
                if(status=="OK"){
                  directionsRenderer.setDirections(response);
                  temp=google.maps.geometry.spherical.computeDistanceBetween ({lat:parseFloat(props.lat),lng:parseFloat(props.lng)}, currentLocation);
          		  console.log(temp)
                }
              }
          	)
          });
      }
    }
   function GetStoreLocation(i){
     var options = {
            zoom:16,
            center:{lat:parseFloat(stores[i].lat),lng:parseFloat(stores[i].lng)}
      }

      // New map
      const directionsService = new google.maps.DirectionsService();
      var map = new google.maps.Map(document.getElementById(`map`), options);
      var directionsRenderer = new google.maps.DirectionsRenderer();
          var markers = stores
          var marker = new google.maps.Marker({
          position:{lat:parseFloat(stores[i].lat),lng:parseFloat(stores[i].lng)},
          map:map,
        });
        directionsRenderer.setMap(map);
      	var infoWindow = new google.maps.InfoWindow({
            content:`<font><strong>${stores[i].name}</strong><br/>${stores[i].address}</font>`
          });
          marker.addListener("click", function(){
            infoWindow.open(map, marker);
            directionsService.route(
              {
                origin: currentLocation,
                destination: {lat:parseFloat(stores[i].lat),lng:parseFloat(stores[i].lng)},
                travelMode: "DRIVING"
              },
              (response, status) => {
                if(status=="OK"){
                  directionsRenderer.setDirections(response);
                }
              }
          	)
          });
        return true;
      }
  /* Distance between two lat/lng coordinates in km using the Haversine formula */
function getDistanceFromLatLng(lat1, lng1, lat2, lng2, miles) { // miles optional
  if (typeof miles === "undefined"){miles=false;}
  function deg2rad(deg){return deg * (Math.PI/180);}
  function square(x){return Math.pow(x, 2);}
  var r=6371; // radius of the earth in km
  lat1=deg2rad(lat1);
  lat2=deg2rad(lat2);
  var lat_dif=lat2-lat1;
  var lng_dif=deg2rad(lng2-lng1);
  var a=square(Math.sin(lat_dif/2))+Math.cos(lat1)*Math.cos(lat2)*square(Math.sin(lng_dif/2));
  var d=2*r*Math.asin(Math.sqrt(a));
  if (miles){return d * 0.621371;} //return miles
  else{return d;} //return km
}

  
</script>

<!-- [DEV MN] -->
<!-- <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCLf8zAu8Hpa-Ke2qXNyRtVQDc4ZMuUZKg"></script> -->
<!-- New API KEY -->
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDW_FyfClVs2oNS8plFRMZTlihJxTLhNiI"></script>

<script src="{{ 'pageTemplate.js' | asset_url }}" defer="defer"></script>
